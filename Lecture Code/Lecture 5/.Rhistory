install.packages("tidyverse")
# library command will load packages for you
# the tidyverse library will load all of
# the tidyverse packages
library(tidyverse)
listings <- read_csv("airbnb_listings_nyc.csv")
# you will notice that read_csv recognizes
# certain attributes about the columns
# last_review is recognized as a Date
# "blank" data handled as 'NA'
str(listings)
# tbl (tibble) is a special class
# of data frame
# if you want to learn more check R4DS
class(listings)
colnames(listings)[1:3] <- c("listing_id", "listing_name", "airbnb_host_id")
# beware of multiple blank spaces
# in this df, we only have "" instead of " " or "   " and so forth
which(listings$reviews_per_month== "")
which(listings$reviews_per_month== " ")
# replace blank spaces with NA
listings$last_review[listings$last_review== ""] <- NA
listings$last_review[7113]
listings$last_review[listings$last_review == " "] <- NA
listings$reviews_per_month[listings$reviews_per_month== ""] <- NA
listings$reviews_per_month[listings$reviews_per_month == " "] <- NA
# are there some properties with high number of min nights?
listings$minimum_nights[order(listings$minimum_nights, decreasing = TRUE)][1:10]
# complete cases will give only observations
# where we have data for every column
listings[!complete.cases(listings),]
listings_cc <- listings[complete.cases(listings),]  # omit obs. with any missing data
listings_cc <- subset(listings_cc, minimum_nights < 60) # omit obs. with large min nights
listings_clean <- listings_cc # use updated listings for remainder of analysis
rm(listings_cc)
# list unique boroughs
sort(unique(as.character(listings$neighbourhood_group)))
# list unique boroughs / fix Staten Island error
sort(unique(as.character(listings_clean$neighbourhood_group)))
listings_clean$neighbourhood_group[listings_clean$neighbourhood_group=="StatenIsland"] <- "Staten Island"
sort(unique(as.character(listings_clean$neighbourhood_group)))
# the first argument in tidyverse functions is 'data'
# usually this needs to reference a data frame
listings_select <- select(listings_clean, listing_id,last_review, room_type, price)
listings_select
# using a "-" sign in a select will de-select that column
# you can combine select and de-select operations
listings_dont_select <- select(listings_clean, -number_of_reviews)
listings_dont_select
# you can choose all columns between two
# similar to seq() command...
listings_seq <- select(listings_clean, id:price)
# you can choose all columns between two
# similar to seq() command...
listings_seq <- select(listings_clean, listing_id:price)
# you can search columns for values
listings_contains <- select(listings_clean, contains("id"))
View(listings_contains)
View(listings_clean)
View(listings_clean)
# filter function is similar to [ ] with a boolean expression
min_nights <- filter(listings_clean, minimum_nights < 30)
# let's see how much data we lost
nrow(min_nights)/nrow(listings_clean)
# filter works with dates too
thisyr <- filter(listings_clean, last_review >= as.Date("2017-09-08"))
# characters too
entire_apt <- filter(listings_clean, room_type == "Entire home/apt")
# use the '&' to combine methods
thisyr_entire <- filter(listings_clean, room_type == "Entire home/apt" & last_review >= as.Date("2017-09-08"))
listings_clean %>%
select(listing_id, minimum_nights,
last_review, price) %>%
filter(minimum_nights < 30) %>%
filter(last_review >= as.Date("2017-09-08"))
listings_clean %>%
select( . , listing_id, minimum_nights,
last_review, price) %>%
filter( . , minimum_nights < 30) %>%
filter( . , last_review >= as.Date("2017-09-08"))
# are a replacement for aggregate()
listings_clean %>%
group_by(neighbourhood_group) %>%
summarise(mean_price = mean(price))
group_by(neighbourhood_group) %>%
summarise(listing_count = n()) %>%
arrange(desc(listing_count))
listings_clean %>%
group_by(neighbourhood_group) %>%
summarise(listing_count = n()) %>%
arrange(desc(listing_count))
View(listings_clean)
listings_clean %>%
mutate(occupancy = (number_of_reviews * 2) * 5.5) %>%
select(occupancy)
View(listings_clean)
View(listings_clean)
# let's read in the review data
reviews_2018 <- read_csv("reviews_aggregated.csv")
# looks like our listing_id is
# the "key" between our two data sets
head(reviews_2018)
(reviews_2018, by = c("listing_id" = "listing_id"))
# the _join functions follow the form
# direction_join(x, y, by = )
# in this case we want to keep the data
# in the "left" df - listings
# and join matches in reviews_2018
listings_clean %>%
left_join(reviews_2018, by = c("listing_id" = "listing_id"))
# we'll be exploring functions from the package:
library(tidyr)
person <- c("John Smith", "Jane Doe", "Mary Johnson")
treatment_a <- c(14, 5, 7)
treatment_b <- c(8, 11, 13)
df <- data.frame(person, treatment_a, treatment_b)
df
tidy_data <-  df %>%
gather(treatment, result, treatment_a, treatment_b)
View(tidy_data)
rect_data <- tidy_data %>%
spread(treatment, result)
rect_data
tidy_data
name_separated <- tidy_data %>%
separate(person,
into=c("first_name", "last_name"),
sep=" ")
name_separated
name_separated
one_name <- name_separated %>%
unite(full_name, first_name,
last_name, sep = '_')
one_name
data(mtcars)
listings_tidyc <- listings_tidyc %>%
mutate(
neighbourhood_group = if_else( neighbourhood_group=="StatenIsland", "Staten Island", neighbourhood_group)
)
# compare to colnames() function below
# colnames(listings)[1:3] <- c("listing_id", "listing_name", "airbnb_host_id")
listings_tidyc <- listings %>% rename(listing_id = id,
listing_name = name,
airbnb_host_id = host_id )
mtcars
View(mtcars)
View(mtcars)
