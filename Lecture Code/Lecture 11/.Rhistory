1:10
samp_dist <- function(n, k, lambda){
# n=sample size, k=times to run, lambda=Poisson parameter
# stop function if input invalid
if(any(c(k, n, lambda) <= 0)){return("error!")}
mean_vector <- rep(NA, times=k) # empty results vector
for(i in 1:k){
x <- rpois(n=n, lambda=lambda) # simulate
mean_vector[i] <- mean(x) # compute x-bar
rm(x) # clear memory
} # end for loop
return(mean_vector) #output
} # end function
lambda <- 5
k <- 0:15
prob <- dpois(k, lambda=lambda)
barplot(prob, names.arg=k, las=TRUE, col="firebrick", xlab="k (number of calls)", ylim=c(0, 0.3),
ylab="probability P(X=k)", main=expression(paste("PMF for X~Poisson(", lambda==5,")", sep="")))
legend("topright", legend=c(expression(paste(lambda==5,  sep="")), "", "",
expression(paste(mu==5,  sep="")),
expression(paste(sigma==2.24,  sep=""))), col="white", bty="n", cex=1.2)
z.10 <- samp_dist(n=10, k=500, lambda=5)
z.10
z.30 <- samp_dist(n=30, k=500, lambda=5)
z.100 <- samp_dist(n=100, k=500, lambda=5)
# histogram: density not frequency
hist(z.10, freq=FALSE, ylim=c(0,y.max), xlim=c(x.min, x.max),
main=expression(paste("Sampling Distribution of ",bar(x), ": n=10, ", lambda==5,sep="")),
las=TRUE, col="cadet blue", xlab="sample means (from Poisson data)", ylab="density")
y.max <- ceiling(max(c(hist(z.10, plot=FALSE)$density, hist(z.30, plot=FALSE)$density, hist(z.100, plot=FALSE)$density)))
x.min <- min(c(z.10, z.30, z.100))
x.max <- max(c(z.10, z.30, z.100))
hist(z.10, freq=FALSE, ylim=c(0,y.max), xlim=c(x.min, x.max),
main=expression(paste("Sampling Distribution of ",bar(x), ": n=10, ", lambda==5,sep="")),
las=TRUE, col="cadet blue", xlab="sample means (from Poisson data)", ylab="density")
curve(dnorm(x, mean=5, sd=sqrt(5/10)), add=TRUE,
lwd=2, col="firebrick")
legend("topright", legend=c(expression(paste("E[",bar(x),"]=5", sep="")),
paste("mean of sample means: ", round(mean(z.10), digits=3), sep=""), "",
expression(paste("SD[",bar(x),"]=0.707")),
paste("sd of sample means: ", round(sd(z.10), digits=3), sep="")), bty="n")
# upload data
x <- read.csv("transaction_data.csv")
dev.off()
dim(x)
head(x)
tail(x)
colnames(x)
################################
# 4. exploratory data analysis #
################################
#pdf("sumplot_rent.pdf", height=4, width=12)
par(mfrow=c(1,3), mar=c(5, 5, 4, 2))
# histogram of data
hist(x$transaction_amount, las=TRUE, xlab="transaction amount", ylab="frequency",
main="Histogram of \nTransaction Amount", cex.axis=1.2, cex.lab=1.3, col = "royalblue")
abline(v=200, col="red", lty=2, lwd=2)     # add vertical line at $1,500 mph
# boxplot
boxplot(x$transaction_amount, main="Box Plot of \nTransaction Amount", pch=19, las=TRUE, ylab="transaction amount")
abline(h=200, col="red", lty=2, lwd=2)     # add vertical line at $1,500 mph
# normal quantile plots
qqnorm(x$transaction_amount, pch=19, las=TRUE, main="Normal Q-Q Plots of \nTransaction Amount", ylab="",
cex.lab=1.3, cex.axis=1.2)
qqline(x$transaction_amount)
s by hand:
# test statistic
test.stat <- (mean(x$transaction_amount)-200)/(sd(x$transaction_amount)/sqrt(nrow(x)))
test.stat <- 2.8857
# p-value: P(T > test statistic)
# p - probability, yields CDF, i.e. probability of returning number smaller than an argument to this function
pt(test.stat, df=nrow(x)-1, lower.tail=FALSE)
# (graphical version of p-value)
dev.off()
curve(dt(x, df=119), from=-3, to=5, las=TRUE, xlab="t", ylab="density",
main=paste("Density of the t(", nrow(x)-1, ") Distribution", sep=""),
col="firebrick", lwd=2, xaxt="n")
axis(side=1, at=test.stat, labels=round(test.stat, digits=3))
test.stat <- (mean(x$transaction_amount)-200)/(sd(x$transaction_amount)/sqrt(nrow(x)))
# p-value: P(T > test statistic)
# p - probability, yields CDF, i.e. probability of returning number smaller than an argument to this function
pt(test.stat, df=nrow(x)-1, lower.tail=FALSE)
